version: '3.8'

services:
  web:
    build: .
    container_name: taskmanager_web
    restart: always
    env_file:
      - .env
    ports:
      - "8000:8000"

    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network

  db:
    image: postgres:15
    container_name: taskmanager_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root  # Укажите пароль
      POSTGRES_DB: localhost
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U your_postgres_user"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  redis:
    image: redis:latest
    container_name: taskmanager_redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - app_network

  celery_worker:
    build: .
    container_name: taskmanager_celery_worker
    restart: always
    command: ["celery", "-A", "api.core.celery_app", "worker", "--loglevel=info"]
    env_file:
      - .env
    depends_on:
      - redis
      - db
    networks:
      - app_network

  celery_beat:
    build: .
    container_name: taskmanager_celery_beat
    restart: always
    command: ["celery", "-A", "api.core.celery_app", "beat", "--loglevel=info"]
    env_file:
      - .env
    depends_on:
      - redis
      - celery_worker
    networks:
      - app_network

  flower:
    build: .
    container_name: taskmanager_flower
    restart: always
    command: ["celery", "-A", "api.core.celery_app", "flower"]
    ports:
      - "5555:5555"
    env_file:
      - .env
    depends_on:
      - redis
      - celery_worker
    networks:
      - app_network

  nginx:
    image: nginx:latest
    container_name: taskmanager_nginx
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - web
    networks:
      - app_network

volumes:
  postgres_data:

networks:
  app_network:
    driver: bridge